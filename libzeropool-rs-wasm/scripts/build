#!/usr/bin/env bash

PARENT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." &> /dev/null && pwd )"
TARGET_DIR="$PARENT_DIR/target"

if ! command -v jq &> /dev/null
then
    echo "jq is required to run this script: https://stedolan.github.io/jq/"
    exit
fi

if ! command -v wasm-pack &> /dev/null
then
    echo "wasm-pack is required to run this script: https://github.com/rustwasm/wasm-pack"
    exit
fi

function patch_package_json () {
  sed -i.bak -E "s/\"name\": \"libzeropool-rs-wasm\"/\"name\": \"libzeropool-rs-wasm-$1\"/g" "$TARGET_DIR/$1/package.json"
  jq '.files |= . + ["snippets"]' "$TARGET_DIR/$1/package.json" > "$TARGET_DIR/$1/tmp.json" \
    && mv "$TARGET_DIR/$1/tmp.json" "$TARGET_DIR/$1/package.json"
}

# build $name $features $is_mt
function build () {
  local name=$1
  local features=$2
  local mt=$3
  local debug=$4

  local package_target_dirname="$TARGET_DIR/$name"

  if [ "$mt" = mt ] ; then
    local out_name="libzeropool_rs_wasm_mt"
    local out_file="$out_name.wasm"

    RUSTFLAGS='-C target-feature=+atomics,+bulk-memory,+mutable-globals -C link-arg=--max-memory=4294967296' \
      rustup run nightly \
        wasm-pack build --release --target web -d "$package_target_dirname" \
        --out-name "$out_file" \
        -- --features "$features" -Z build-std=panic_abort,std
  else
    local out_name="libzeropool_rs_wasm"
    local out_file="$out_name.wasm"

    wasm-pack build --release --target web -d "$package_target_dirname" -- --features "$features" \
      --out-name "$out_file"
  fi

  # Optimize the binary, since wasm-pack refuses to see wasm-opt
  if [ "$debug" = debug ] ; then
    wasm-opt -o "$package_target_dirname/wasm-opt.wasm" --debuginfo -O3 "$package_target_dirname/$out_file" && mv "$package_target_dirname/wasm-opt.wasm" "$package_target_dirname/$out_file"
  else
    wasm-opt -o "$package_target_dirname/wasm-opt.wasm" -O3 "$package_target_dirname/$out_file" && mv "$package_target_dirname/wasm-opt.wasm" "$package_target_dirname/$out_file"
  fi

  # Remove invalid typings
  sed -i.bak -E '/BroccoliDestroyInstance/d' "$package_target_dirname/$out_name.d.ts"
  sed -i.bak -E '/BroccoliDestroyInstance/d' "$package_target_dirname/$out_name.wasm.d.ts"

  # Patch package.json, since wasm-pack doesn't allow renaming packages
  patch_package_json "$name"
}

build web web st
build web-mt web,multicore mt
build web-debug web st debug
build web-mt-debug web,multicore mt debug
