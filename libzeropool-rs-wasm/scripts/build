#!/usr/bin/env bash

PARENT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." &> /dev/null && pwd )"
TARGET_DIR="$PARENT_DIR/target"

if ! command -v jq &> /dev/null
then
    echo "jq is required to run this script: https://stedolan.github.io/jq/"
    exit
fi

function patch_package_json () {
  sed -i.bak -E "s/\"name\": \"libzeropool-rs-wasm\"/\"name\": \"libzeropool-rs-wasm-$1\"/g" "$TARGET_DIR/$1/package.json"
  jq '.files |= . + ["snippets"]' "$TARGET_DIR/$1/package.json" > "$TARGET_DIR/$1/tmp.json" \
    && mv "$TARGET_DIR/$1/tmp.json" "$TARGET_DIR/$1/package.json"
}

# build $name $features $is_mt
function build () {
  local PACKAGE_TARGET_DIR="$TARGET_DIR/$1"
  if [ "$3" = true ] ; then
    RUSTFLAGS='-C target-feature=+atomics,+bulk-memory,+mutable-globals' \
      rustup run nightly \
      wasm-pack build --release --target web -d "$PACKAGE_TARGET_DIR" \
      -- --features $2 -Z build-std=panic_abort,std
  else
    wasm-pack build --release --target web -d "$PACKAGE_TARGET_DIR" -- --features $2
  fi

  # Optimize the binary, since wasm-pack refuses to see wasm-opt
  if [ "$4" = debug ] ; then
    wasm-opt -o "$PACKAGE_TARGET_DIR/wasm-opt.wasm" --debuginfo -O3 "$PACKAGE_TARGET_DIR/libzeropool_rs_wasm_bg.wasm" && mv "$PACKAGE_TARGET_DIR/wasm-opt.wasm" "$PACKAGE_TARGET_DIR/libzeropool_rs_wasm_bg.wasm"
  else
    wasm-opt -o "$PACKAGE_TARGET_DIR/wasm-opt.wasm" -O3 "$PACKAGE_TARGET_DIR/libzeropool_rs_wasm_bg.wasm" && mv "$PACKAGE_TARGET_DIR/wasm-opt.wasm" "$PACKAGE_TARGET_DIR/libzeropool_rs_wasm_bg.wasm"
  fi

  # Remove invalid typings
  sed -i.bak -E '/BroccoliDestroyInstance/d' "$PACKAGE_TARGET_DIR/libzeropool_rs_wasm.d.ts"
  sed -i.bak -E '/BroccoliDestroyInstance/d' "$PACKAGE_TARGET_DIR/libzeropool_rs_wasm_bg.wasm.d.ts"
  # Patch package.json, since wasm-pack doesn't allow renaming packages
  patch_package_json "$1"
}

build web web false
build web-mt web,multicore true
build web-debug web false debug
build web-mt-debug web,multicore true debug
