[package]
name = "libzeropool-rs-wasm"
description = "A higher level zeropool API for Wasm"
version = "0.7.0"
authors = ["Dmitry Vdovin <voidxnull@gmail.com>"]
repository = "https://github.com/zeropoolnetwork/libzeropool-rs/"
license = "MIT OR Apache-2.0"
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]
bundler = ["libzeropool-rs/web"]
web = ["libzeropool-rs/web"]
nodejs = ["libzeropool-rs/node"]
multicore = ["libzeropool-rs/multicore", "wasm-bindgen-rayon"]

[dependencies]
wasm-bindgen = { version = "0.2.74" }

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.5", optional = true }

libzeropool-rs = { path = "../libzeropool-rs", version = "0.6.1" }
libzeropool = { version = "0.5.1", default-features = false }
getrandom = { version = "0.2.3", features = ["js"] }
fawkes-crypto = { version = "4.2.4", features = ["wasm", "serde_support"] }
bs58 = "0.4.0"
kvdb-web = { path = "../libs/kvdb-web", package = "zp-kvdb-web", version = "0.11.0" }
kvdb = "0.11.0"
kvdb-memorydb = "0.11.0"
byteorder = "1.4.3"
wasm-bindgen-futures = "0.4.24"
serde = "1.0.126"
sha3 = "0.9.1"
thiserror = "1.0.26"
serde-wasm-bindgen = "0.4.3"
lazy_static = "1.4.0"
hex = { version = "0.4.3", features = ["serde"] }
js-sys = "0.3.55"
rayon = "1.5.3"
wasm-bindgen-rayon = { version = "1.0.3", optional = true }
futures = "0.3.25"

[dev-dependencies]
wasm-bindgen-test = "0.3.24"
test-case = "1.2.0"
rand = "0.8.4"
serde_json = "1.0.64"
wasm-bindgen = { version = "0.2.74", features = ["serde-serialize"] }

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"

# Until wasm-pack learns how to find wasm-opt in PATH
[package.metadata.wasm-pack.profile.dev]
wasm-opt = false

[package.metadata.wasm-pack.profile.profiling]
wasm-opt = false

[package.metadata.wasm-pack.profile.release]
wasm-opt = false

